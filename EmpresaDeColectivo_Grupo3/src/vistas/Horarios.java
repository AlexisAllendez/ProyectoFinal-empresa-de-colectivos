/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vistas;

import EmpresaDeColectivo.Entidades.Horario;
import EmpresaDeColectivo.Entidades.Ruta;
import accesoADatos.HorarioData;
import accesoADatos.RutaData;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author adam
 */
public class Horarios extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            // Bloquear ediciones dentro de la tabla
            return false;
        }
    };

    /**
     * Creates new form Horarios
     */
    public Horarios() {
        initComponents();
        ArrayList<String> columnas = new ArrayList<>();

        columnas.add("Destino");
        columnas.add("Hora salida");
        columnas.add("Hora llegada");
        columnas.add("Estado");

        armarJTable(columnas.toArray(String[]::new));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabla = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSalidaHora = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtSalidaMinutos = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtLlegadaHora = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtLlegadaMinutos = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jcRuta = new javax.swing.JComboBox<>();
        checkboxEstado = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        btnAgregarFila = new javax.swing.JButton();
        btnQuitarFila = new javax.swing.JButton();
        btnModificarFila = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setClosable(true);

        jtTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTabla);

        jLabel5.setText("hs");

        jLabel3.setText("Hora salida");

        txtSalidaHora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalidaHoraActionPerformed(evt);
            }
        });
        txtSalidaHora.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalidaHoraKeyTyped(evt);
            }
        });

        jLabel6.setText(":");

        txtSalidaMinutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalidaMinutosActionPerformed(evt);
            }
        });
        txtSalidaMinutos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalidaMinutosKeyTyped(evt);
            }
        });

        jLabel7.setText("hs");

        txtLlegadaHora.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLlegadaHoraKeyTyped(evt);
            }
        });

        jLabel16.setText(":");

        txtLlegadaMinutos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLlegadaMinutosKeyTyped(evt);
            }
        });

        jLabel4.setText("Hora llegada");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtSalidaHora, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSalidaMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtLlegadaHora, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLlegadaMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtSalidaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtSalidaMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtLlegadaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(txtLlegadaMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 26, Short.MAX_VALUE))
        );

        jcRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcRutaActionPerformed(evt);
            }
        });

        checkboxEstado.setText("estado");
        checkboxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcRuta, 0, 120, Short.MAX_VALUE)
                .addGap(32, 32, 32)
                .addComponent(checkboxEstado)
                .addGap(36, 36, 36))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkboxEstado)
                    .addComponent(jcRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        btnAgregarFila.setText("Agregar horario");
        btnAgregarFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarFilaActionPerformed(evt);
            }
        });

        btnQuitarFila.setText("Quitar horario");
        btnQuitarFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarFilaActionPerformed(evt);
            }
        });

        btnModificarFila.setText("Modificar horario");
        btnModificarFila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarFilaActionPerformed(evt);
            }
        });

        btnNuevo.setText("Nueva fila");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModificarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuitarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(btnAgregarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnQuitarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificarFila, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNuevo))
        );

        jLabel8.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel8.setText("Horarios");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(99, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(64, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(412, 412, 412))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkboxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxEstadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkboxEstadoActionPerformed

    private void txtSalidaMinutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalidaMinutosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalidaMinutosActionPerformed

    //Boton agregar fila
    private void btnAgregarFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarFilaActionPerformed
        agregarFila();
        checkboxEstado.setEnabled(true);
        btnNuevo.setEnabled(false);

//        try {
//            
//            // Obtener datos de la vista 
//            String horaSalidaStr = txtSalidaHora.getText().trim();
//            String minutosSalidaStr = txtSalidaMinutos.getText().trim();
//            String horaLlegadaStr = txtLlegadaHora.getText().trim();
//            String minutosLlegadaStr = txtLlegadaMinutos.getText().trim();
//
//            // Convertir a valores enteros
//            int horaSalida = Integer.parseInt(horaSalidaStr);
//            int minutosSalida = Integer.parseInt(minutosSalidaStr);
//            int horaLlegada = Integer.parseInt(horaLlegadaStr);
//            int minutosLlegada = Integer.parseInt(minutosLlegadaStr);
//
//            // Crear objetos LocalTime para la hora de salida y llegada
//            LocalTime horaSalidaLocalTime = LocalTime.of(horaSalida, minutosSalida);
//            LocalTime horaLlegadaLocalTime = LocalTime.of(horaLlegada, minutosLlegada);
//
//            boolean estado = checkboxEstado.isSelected();
//
//            Horario horario = new Horario();
//            horario.setHoraSalida(horaSalidaLocalTime);
//            horario.setHoraLlegada(horaLlegadaLocalTime);
//            horario.setEstado(estado);
//
//            HorarioData horarioData = new HorarioData();
//            horarioData.guardarHorario(horario);
//        } catch (NumberFormatException e) {
//            JOptionPane.showMessageDialog(null, "Error: El ID de la ruta debe ser un número válido.");
//        }
    }//GEN-LAST:event_btnAgregarFilaActionPerformed

    //Boton quitar fila
    private void btnQuitarFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarFilaActionPerformed
        quitarFilasSeleccionadas();
        limpiarCampos();
        btnNuevo.setEnabled(false);
        btnAgregarFila.setEnabled(true);
        btnModificarFila.setEnabled(false);
        btnQuitarFila.setEnabled(false);
        jtTabla.clearSelection();

    }//GEN-LAST:event_btnQuitarFilaActionPerformed

    //Boton modificar fila
    private void btnModificarFilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarFilaActionPerformed
        modificarFila();
        limpiarCampos();
        btnAgregarFila.setEnabled(true);
        btnQuitarFila.setEnabled(false);

    }//GEN-LAST:event_btnModificarFilaActionPerformed

    private void txtSalidaHoraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalidaHoraKeyTyped
        char caracter = evt.getKeyChar();
        if (!Character.isDigit(caracter)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSalidaHoraKeyTyped

    private void txtSalidaMinutosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalidaMinutosKeyTyped
        char caracter = evt.getKeyChar();
        if (!Character.isDigit(caracter)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSalidaMinutosKeyTyped

    private void txtLlegadaHoraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLlegadaHoraKeyTyped
        char caracter = evt.getKeyChar();
        if (!Character.isDigit(caracter)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtLlegadaHoraKeyTyped

    private void txtLlegadaMinutosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLlegadaMinutosKeyTyped
        char caracter = evt.getKeyChar();
        if (!Character.isDigit(caracter)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtLlegadaMinutosKeyTyped

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        limpiarCampos();
        checkboxEstado.setSelected(true);
        btnNuevo.setEnabled(false);
        btnAgregarFila.setEnabled(true);
        btnModificarFila.setEnabled(false);
        btnQuitarFila.setEnabled(false);
        jtTabla.clearSelection();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void txtSalidaHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalidaHoraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalidaHoraActionPerformed

    private void jcRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcRutaActionPerformed
        if (jcRuta.getSelectedIndex() == -1) {
            return;
        }
        
        Ruta ruta = (Ruta) jcRuta.getSelectedItem();
        llenarLista(ruta);
    }//GEN-LAST:event_jcRutaActionPerformed
    

    private void armarJTable(String[] columnas) {
        for (String columna : columnas) {
            modelo.addColumn(columna);
        }
        jtTabla.setModel(modelo);
        jtTabla.setCellSelectionEnabled(false);
        jtTabla.setRowSelectionAllowed(true);

        checkboxEstado.setSelected(true);

        btnQuitarFila.setEnabled(false);
        btnNuevo.setEnabled(false);
        btnModificarFila.setEnabled(false);
        /*
        columnas.add("idHorario");
        columnas.add("idRuta");
        columnas.add("horaSalida");
        columnas.add("horaLlegada");
        columnas.add("capacidad");
        columnas.add("estado");
         */

        jtTabla.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if (event.getValueIsAdjusting()) {
                    return;
                }

                int filaSeleccionada = jtTabla.getSelectedRow();
                int numFilas = jtTabla.getSelectedRowCount();
                System.out.println("rowcount=" + numFilas);

                if (filaSeleccionada != -1) {
                    if (numFilas == 1) {
                        btnModificarFila.setEnabled(true);
                        btnNuevo.setEnabled(true);
                        btnQuitarFila.setEnabled(true);
                        btnAgregarFila.setEnabled(false);
                        Boolean estado = (Boolean) jtTabla.getValueAt(filaSeleccionada, 4);
                        if (estado != null) {
                            checkboxEstado.setSelected(estado);
                        }
//                        txt.setText(jtTabla.getValueAt(filaSeleccionada, 2).toString());
//                        
//                        String duracion = (String) jtTabla.getValueAt(filaSeleccionada, 3);
//                        if(duracion.length() == 2){
//                            String[] duracionHHMM = duracion.split(":");
//                            if(!duracionHHMM[0].isEmpty()){
//                                txtDuracionHora.setText(duracionHHMM[0]);
//                            }
//                            if(!duracionHHMM[1].isEmpty()){
//                            txtDuracionMin.setText(duracionHHMM[1]);
//                            }
//                        }

                    }
                }
                if (numFilas == 0) {
                    btnModificarFila.setEnabled(false);
                    btnQuitarFila.setEnabled(false);
                    btnAgregarFila.setEnabled(true);
                    checkboxEstado.setEnabled(true);
                }
                if (numFilas > 1) {
                    btnModificarFila.setEnabled(false);
                    btnQuitarFila.setEnabled(true);
                    btnAgregarFila.setEnabled(false);
                    checkboxEstado.setEnabled(false);
                }
            }
        });
    }

    private void limpiarCampos() {
        txtLlegadaHora.setText("");
        txtLlegadaMinutos.setText("");
        txtSalidaHora.setText("");
        txtSalidaMinutos.setText("");
    }

    private void llenarCombo() {
        Ruta seleccionado = new Ruta();
        seleccionado.setDestino(null);
        jcRuta.addItem(seleccionado.getDestino());
        jcRuta.setSelectedItem(seleccionado);

        RutaData rutaData = new RutaData();
        List<Ruta> rutas = rutaData.listarRutas();

        for (Ruta ruta : rutas) {
            jcRuta.addItem(ruta.toString());
        }

    }

    private void llenarLista(Ruta rutaSeleccionada) {
        if (rutaSeleccionada == null) {
            return;
        }
        String destino = rutaSeleccionada.getDestino();
        RutaData rutaData = new RutaData();
        List<Ruta> destinoRutas = rutaData.listarRutasxDestino(destino);
        llenarLista(destinoRutas);
    }

    private void llenarLista(List<Ruta> rutas) {
        borrarLista();
        System.out.println("llenarLista()");
        for (Ruta ruta : rutas) {
            System.out.println(ruta);
            Vector<Object> renglon = new Vector<>();
            renglon.add(ruta.getDestino());

            modelo.addRow(renglon);
        }
        jtTabla.repaint();
    }
    
    private void borrarLista() {
        int filas = modelo.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
        jtTabla.repaint();
    }
    
    private void agregarFila() {
        String horaSalida = txtSalidaHora.getText() + " " + txtSalidaMinutos.getText();
        String horaLlegada = txtLlegadaHora.getText() + " " + txtLlegadaMinutos.getText();
        if (validarCamposEntrada()) {
            modelo.addRow(new Object[]{
                horaSalida,
                horaLlegada,
                checkboxEstado.isSelected()
            });
            limpiarCampos();
        } else {
            JOptionPane.showMessageDialog(null,
                    "No se puede agregar la fila porque tiene "
                    + "datos ínvalidos.");
        }
    }

    private void quitarFilasSeleccionadas() {
// ----------------------- Pendiente --------------------
//        Integer[] idFilas = getIdsDeLaJTabla();
//        for(Integer idFila: idFilas){
        // borrar fila de los datos persistentes
        // Pendiente para hacer: Accesso a Datos::ColectivosData.java
        // ColectivosDatos.borrarColectivo(idFila)
//        }    
// ----------------------- Pendiente --------------------
        int[] filasSeleccionadas = jtTabla.getSelectedRows();
        int filas = modelo.getRowCount();
        for (int i = filasSeleccionadas.length - 1; i >= 0; i--) {
            modelo.removeRow(filasSeleccionadas[i]);
        }
        jtTabla.repaint();
// ----------------------- Pendiente --------------------
//        limpiarJTabla();
        // ----------------------- Pendiente --------------------      

    }

    private void limpiarJTabla() {
        int filas = modelo.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
        jtTabla.repaint();

    }

    private void modificarFila() {
        quitarFilasSeleccionadas();
        agregarFila();
    }
// ----------------------- Pendiente --------------------
//    private Integer getIdTabla(int fila) {
//        Object val = jtTabla.getValueAt(fila, 0);
//
//        if (val == null) {
//            return null;
//        }
//        
//        StringBuilder cadenaIdFila = new StringBuilder();
//            cadenaIdFila.append(val);
//
//        return Integer.valueOf(
//                    cadenaIdFila.toString());
//    }

//        private Integer getIdsJTabla(int fila) {
//        Object val = jtTabla.getValueAt(fila, 0);
//        if (val == null) {
//            return null;
//        }
//        if (val instanceof Integer) {
//            return (Integer) val;
//        }
//        return Integer.valueOf((String) val);
//    }
// ----------------------- Pendiente --------------------
    private Integer[] getIdsDeLaJTabla() {
        int numFilas = modelo.getRowCount();
        if (numFilas < 1) {
            return null;
        }
        int[] filasSeleccionadas = jtTabla.getSelectedRows();
        System.out.println("filasSelccionadas.length=" + filasSeleccionadas.length);
        Integer[] idFilas = new Integer[filasSeleccionadas.length];

        for (int i = 0; i < filasSeleccionadas.length; i++) {
            Object val = modelo.getValueAt(filasSeleccionadas[i], 0);
            Integer idFila = null;
            StringBuilder cadenaIdFila = new StringBuilder();
            cadenaIdFila.append(val);
            idFilas[i] = Integer.valueOf(
                    cadenaIdFila.toString());
        }

        return idFilas;
    }

    private boolean validarCamposEntrada() {
//        Boolean retorno = null;
        boolean retorno = true;
        if (txtSalidaHora.getText().isBlank()) {
            JOptionPane.showMessageDialog(null,
                    "Error: el campo de hora salida no puede estar vacía.");
            retorno = false;
        }
        if (txtSalidaMinutos.getText().isBlank()) {
            JOptionPane.showMessageDialog(null,
                    "Error: el campo de minutos salida no puede estar vacía.");
            retorno = false;
        }
        if (txtLlegadaHora.getText().isBlank()) {
            JOptionPane.showMessageDialog(null,
                    "Error: el campo de hora llegada no puede estar vacía.");
            retorno = false;
        }
        if (txtLlegadaMinutos.getText().isBlank()) {
            JOptionPane.showMessageDialog(null,
                    "Error: el campo de minutos llegada no puede estar vacía.");
            retorno = false;
        }
        

        return retorno;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarFila;
    private javax.swing.JButton btnModificarFila;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnQuitarFila;
    private javax.swing.JCheckBox checkboxEstado;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcRuta;
    private javax.swing.JTable jtTabla;
    private javax.swing.JTextField txtLlegadaHora;
    private javax.swing.JTextField txtLlegadaMinutos;
    private javax.swing.JTextField txtSalidaHora;
    private javax.swing.JTextField txtSalidaMinutos;
    // End of variables declaration//GEN-END:variables
}
